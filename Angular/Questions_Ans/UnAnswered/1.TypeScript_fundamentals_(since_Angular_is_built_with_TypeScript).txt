** TypeScript fundamentals (since Angular is built with TypeScript) **

- Typescript's primary uses cases are:
    - appending types to js variables, function params, function returns.
    - static typing to js - adding implicit types to js variables, function params, function returns.
    - providing type checking in compile time.
    - used in Angular development to create SPA.
    - Angular is built with TypeScript.

- To help catch errors at compile time.
- By leveraging TypeScript's type system, Angular ensures better type safety and reduces the likelihood of runtime errors
- code clarity
- added intelligence to IDE's
- Tooling support : VS code, Idea, webpack, babel
- TypeScript's features, such as decorators, interfaces, and generics are used in Angular.


- JIT (Just In Time) Compilation - ng serve
    - In-memory compilation
        - tsc - used to compile .ts files to .js files
        - .html files
        - .css files
        - external library .js files
        - angular syntactic constructs (components, directives, services, modules, decorators, template syntax (e.g., interpolation, property binding, event binding), structural directives (*ngIf, *ngFor), and other Angular-specific features.)
        - angular compiler .js code
        - Tools required for JIT (Angular CLI, Webpack, webpack-dev-server, TypeScript Compiler (tsc), Angular Compiler, Browser Developer Tools)

- AOT (Ahead Of Time) Compiation - ng build
    - build code to /dist folder path mensioned in the angular.json (Native .js .html .css code is built)
        - (tsc) converts .ts to .js code
        - angular syntax to .js
        - .html
        - .css
        - externam library code to .js
        - Tools required for AOT (Angular Compiler (ngc), Angular CLI, Webpack or Angular CLI's Built-in Bundler, TypeScript Compiler (tsc), Browser Developer Tools)



Typescript features in the context of Angular Application Development.

1.Type Annotations & Type Inference (Typescript provide types at runtime to varibales with no implicit types):
    - Implicit addition of types to the variables, function params, function returns
    - Type Safety
    - Code Documentation
    - Improved Tooling (IDE can notify the type errors before start of compilation)
    - Primitive Types:
        - number: Numeric values (e.g., 1, 3.14).
        - string: Textual values (e.g., 'hello', "world").
        - boolean: Boolean values (true or false).
        - null: The null value.
        - undefined: The undefined value.
    - Object Types:
        - object: Any JavaScript object (not recommended for type checking).
        - array: Array type (e.g., number[], string[]).
        - tuple: Tuple type for fixed-length arrays with specific element types.
        - enum: Enumerated type for a set of named constants.
    - Function Types:
        - function: Function type (e.g., (x: number, y: number) => number).
    - Other Types:
        - any: Any type, allows any value.
        - void: Represents the absence of a value (usually used as return type for functions that don't return a value).

2.Interfaces
    - Used to add custom types to object / api responses
    - type is also used to create custom types but not have an ability to extend or append the types like interfaces.
    - 

3.Classes

4.Decorators

5.Modules

6.Generics

7.Enums

8.Type Assertions